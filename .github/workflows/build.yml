name: build

on:
  push:
  release:
    types: [created, published]

env:
  POETRY_VERSION: 1.5.1

jobs:
  skip-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          concurrent_skipping: 'same_content'
          do_not_skip: '["release", "workflow_dispatch", "schedule"]'
  lint:
    needs: skip-check
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v4.7.0
        with:
          python-version: '3.x'
      - name: Lint with Pre-commit
        uses: pre-commit/action@v3.0.0

  build:
    needs: lint
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    name: build (python ${{ matrix.python-version }})
    outputs:
      targz: generic-${{ steps.meta.outputs.version }}.tar.gz
      wheel: generic-${{ steps.meta.outputs.version }}-py3-none-any.whl
    steps:
      - uses: actions/checkout@v3.5.3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.7.0
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install poetry==$POETRY_VERSION
          poetry config virtualenvs.in-project true
      - name: Collect Project Data
        id: meta
        run: .github/scripts/metadata.sh
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Test
        run: poetry run pytest --cov=generic
      - name: Code Climate Coverage Action
        uses: paambaati/codeclimate-action@v5.0.0
        env:
          CC_TEST_REPORTER_ID: f9441442730130d385df69241a779ac3b663756ed21881179826e3fab7e01924
        with:
          coverageCommand: poetry run coverage xml
      - name: Create Source Dist and Wheel
        if: ${{ matrix.python_version == env.python_version }}
        run: poetry build
      - name: Upload generic-${{ steps.meta.output.version }}.tar.gz
        if: ${{ matrix.python_version == env.python_version }}
        uses: actions/upload-artifact@v3
        with:
          name: generic-${{ steps.meta.outputs.version }}.tar.gz
          path: dist/generic-${{ steps.meta.outputs.version }}.tar.gz
      - name: Upload generic-${{ steps.meta.outputs.version }}-py3-none-any.whl
        if: ${{ matrix.python_version == env.python_version }}
        uses: actions/upload-artifact@v3
        with:
          name: generic-${{ steps.meta.outputs.version }}-py3-none-any.whl
          path: dist/generic-${{ steps.meta.outputs.version }}-py3-none-any.whl

  publish-to-pypi:
    name: Publish to PyPI (release only)
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
    if: ${{ github.event_name == 'release' }}
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.targz }}
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.wheel }}
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
